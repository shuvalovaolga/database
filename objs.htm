<HTML>
<HEAD>
 <!-- Meta http equivalent was here                                     -->
 <TITLE>InterBase SQL: Объекты и концепции базы данных</TITLE>
 <LINK rel="prev" href="about.htm">
 <LINK rel="next" href="syconv.htm">
 <LINK rel="contents" href="start.htm#toc">
 <LINK rel="stylesheet" href="styles.css" type="text/css">
</HEAD>

<BODY bgcolor="#FFFFFF" text="#000000" link="#099771" vlink="#006741" alink="#800000">
<A NAME="start"></a>

<script><!--
if (window.focus) window.focus();
var toc_url="toc_objs.htm";
var page_type="other";
var anchor_arr = new Array(
 "tables",  "Таблицы",
 "colums",  "Столбцы",
 "dtypes",  "Типы данных",
 "domains", "Домены",
 "intconst","Oграничения целостности",
 "indexes", "Индексы",
 "views",   "Виды",
 "sproc",   "Сохраненные процедуры",
 "trigg",   "Триггеры",
 "gener",   "Генераторы",
 "secur",   "Защита"
);
if (window.parent && parent.allow_frames) parent.update_frames();
//--></script>

<!-- top -->
<div><small><span class="Navigation">
<a href="start.htm">Оглавление</a>
&nbsp;|&nbsp;<a href="about.htm">Назад</a>
&nbsp;|&nbsp;<a href="syconv.htm">Вперед</a>
</span></small></div>
<HR noshade>
<div align="right"><em>Справочник по инструкциям и функциям <em>InterBase</em> SQL</em></div>
<!-- /top -->

<H2>Объекты и концепции базы данных</H2>
<P>База данных состоит из различных объектов, таких как таблицы, виды, домены,
сохраненные процедуры, триггеры. Объекты базы данных содержат всю информацию о
ее структуре и данных. Объекты базы данных так же упоминаются, как метаданные.</P>
<P>Следующие разделы содержат краткую информацию об объектах и концепциях базы
данных <em>InterBase</em>:</P>
<!-- contents -->
<DL>
<DT><DD><A HREF="index.htm">Таблицы</A> (Tables)
<DT><DD><A HREF="index.htm">Столбцы</A> (Columns)
<DT><DD><A HREF="index.htm">Типы данных</A> (Data types)
<DT><DD><A HREF="index.htm">Домены</A> (Domains)
<DT><DD><A HREF="index.htm">Справочные ограничения целостности</A> (Referential
 integrity constraints)
<DT><DD><A HREF="index.htm">Индексы</A> (Indexes)
<DT><DD><A HREF="index.htm">Виды</A> (Views)
<DT><DD><A HREF="index.htm">Сохраненные процедуры</A> (Stored procedures)
<DT><DD><A HREF="index.htm">Триггеры</A> (Triggers)
<DT><DD><A HREF="index.htm">Генераторы</A> (Generators)
<DT><DD><A HREF="index.htm">Защита</A> (Security)
</DL>
<!-- /contents -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="tables">Таблицы (Tables)</A></H3>
<P>Реляционные базы данных хранят все данные в таблицах. Таблица это структура,
состоящая из множества неупорядоченных горизонтальных строк (rows),
каждая из которых содержит одинаковое количество вертикальных столбцов (colums).
Пересечение отдельной строки и столбца называеися полем (field), которое содержит
специфическую информацию. Многие принципы работы реляционной базы данных взяты
из определений отношений (relations) между таблицами.</P>
<P><em>InterBase</em> хранит информацию о метаданных в специальных таблицах, которые
называются системными таблицами (system tables). Системные таблицы имеют специальные
столбцы, которые содержат информацию о типе метаданных в этой таблице. Имена
всех системных таблиц начинаются с "RDB$". Пример системной таблицы -
RDB$RELATIONS, которая содержит информацию о каждой таблице в базе данных.</P>
<P>Системные таблицы имеют такую же структуру, как и определенные пользователем
таблицы и расположенны в той же самой базе. Так как метаданные, пользовательские
таблицы, и данные все вместе расположены в одном и том же файле базы данных,
каждая база данных является законченным модулем и может быть легко перенесена
между различными машинами.</P>
<P>Системные таблицы могут быть изменены подобно любой другой таблице базы
данных. Если вы не понимаете всех взаимосвязей между системными таблицами, то
непосредственное изменение их может иметь негативный эффект на другие системные
таблицы и разрушить вашу базу данных.</P>
<!-- <P>Для получения полной информации о таблицах, смотри
<A HREF="tables.htm"><EM>Работа с Таблицами</EM></A>.</P> -->
<!-- <P>Для получения полного описания системных таблиц и видов <em>InterBase</em>,
смотри <A HREF="stables.htm"><EM>Системные Таблицы и Просмотры</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="colums">Столбцы (Columns)</A></H3>
<P>Создание таблицы главным образом подразумевает определение столбцов таблицы.
Главные атрибуты столбца включают:</P>
<UL>
 <LI>Имя столбца;
 <LI>Тип данных столбца или домен на котором он базируется;
 <LI>Может или нет поле столбца принимать значение NULL;
 <LI>Факультативно справочные ограничения целостности (referential integrity constraints).
</UL>
<!-- <P>Для получения полной информации о столбцах, смотри
<A HREF="colums.htm"<EM>>Как определять Столбцы</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="dtypes">Типы данных (Data types)</A></H3>
<P>Данные сохранены в определенном формате, который называется типом данных (data type).
Типы данных могут быть классифицированы по четырем категориям: числовые
(numeric), символьные (character), даты (date) и BLOB. Числовые данные включают
в себя все числа, начиная с целых вплоть до чисел двойной точности с плавающей
точкой. Символьные данные содержат строки текста. Даты используются для
хранения дат и времени.</P>
<P>В то время как числовые, символьные и даты являются стандартными типами
данных, BLOB-тип заслуживает специального внимания.</P>

<H4>Тип данных BLOB</H4>
<P><em>InterBase</em> поддерживает такой тип данных, как большие бинарные объекты (binary
large object - BLOB), которые могут хранить данные неограниченного размера. Тип
BLOB это расширение стандартной реляционной модели, которая обычно обеспечивает
только типы данных фиксированной длины.</P>
<P>Тип данных BLOB аналогичен последовательному файлу (flat file), BLOB данные
могут быть сохранены в любом формате (к примеру, бинарном или ASCII). BLOB,
однако, это не отдельный файл. BLOB данные хранятся в базе данных наряду со всеми
другими данными. Так как BLOB столбцы часто содержат большие и переменные
объемы данных, BLOB столбцы хранятся в отдельных сегментах.</P>
<P><em>InterBase</em> не поддерживает непосредственно преобразование BLOB данных
в другие форматы, но на некоторых платформах, BLOB фильтры могут транслировать
BLOB данные из одного формата в другой.</P>
<!-- <P>Для получения полной информации о типах данных, смотри
<A HREF="dtype.htm"><EM>Определение Типа Данных</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="domains">Домены (Domains)</A></H3>
<P>В добавление к явному определению типа данных столбцов, <em>InterBase</em> обеспечивает
глобальные определения столбцов или домены (domains), на которых могут базироваться
определения столбцов. Домен содержит информацию о тип данных, устанавливает атрибуты и
ограничения целостности столбцов. В последующем при создании таблиц возможно
использовать домены для определения столбцов.</P>
<!-- <P>Для получения полной информации о доменах, смотри
<A HREF="domains.htm"><EM>Работа с Доменами</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="intconst">Справочные ограничения целостности (Referential integrity
constraints)</A></H3>
<P><em>InterBase</em> позволяет вам определять правила обеспечивающие целостность
информации хранящейся в столбцах, эти првавила названы справочными ограничениями
целостности (referential integrity constraints).
Ограничения целостности управляют связями типа столбец-таблица
(column-to-table) и таблица-таблица (table-to-table) а также проверкой ввода
данных. Они выпонены через первичные ключи (primary keys), внешние ключи
(foreign keys) и проверочные ограничения (check constraints). Обычно
первичный ключ это столбец (или группа столбцов), которые используются, чтобы
уникально идентифицировать строку таблицы. Внешний ключ это столбец, чьи значения должны
соответствовать значениям столбца в другой таблице. Проверочные ограничения -
ограничивают ввод данных определенным диапазоном или набором
значений.</P>
<P>Например, таблица EMPLOYEE могла бы быть определена имеющей внешний ключ
столбец DEPT_NO. Который определен в соответствии со столбцом номера отдела в
таблице DEPARTMENT. Это гарантировало бы, что каждый служащий из таблицы
EMPLOYEE связан с существующим отделом в таблице DEPARTMENT.</P>
<!-- <P>Для получения более полной информации, смотри
<A HREF="intconst.htm"><EM>Определение Ограничений Целостности</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="indexes">Индексы (Indexes)</A></H3>
<P>Индексы это механизм для улучшения быстродействия поиска данных. Индекс
определяет столбцы которые могут быть использованы для эффективного поиска и
сортировки в таблице. <!-- Это обеспечивает средства просмотра только специфического
подмножества строк в таблице, улучшение быстродействие доступа к данным. --></P>
<P><em>InterBase</em> автоматически определят уникальные индексы для первичных и
внешних ключей таблицы.</P>
<!-- <P>Для получения полной информации об индексах, смотри
<A HREF="indexs.htm"><EM>Работа с индексами</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="views">Виды (Views)</A></H3>
<P>Вид (view) это виртуальная таблица, которая не сохранена физически в
базе данных, но ведет себя точно также как "реальная" таблица.
Вид может содержать данные из одной или более таблиц или других видов
и используется для хранения часто используемых запросов (queries) или
множества запросов в базе данных.</P>
<P>Виды могут также обеспечивать ограниченные средства защиты, так как они
могут обеспечивать доступ пользователей к подмножеству доступных данных при
скрытии других связанных и чувствительных данных.</P>
<!-- <P>Для получения полной информации о видах, смотри
<A HREF="views.htm"><EM>Работа с Просмотрами</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="sproc">Сохраненные процедуры (Stored procedures)</A></H3>
<P>Сохраненные процедуры (stored procedure) это отдельные программы, написанные
на языке процедур и триггеров <em>InterBase</em>, который является расширением SQL.
Сохраненные процедуры являются частью метаданных базы данных. Сохраненные
процедуры могут получать входные параметры, возвращать значения приложению и
могут быть вызваны явно из приложения или подстановкой вместо имени таблицы в
инструкции SELECT.</P>
<P>Сохраненные процедуры обеспечивают следующие возможности:</P>
<UL>
 <LI>Модульный проект: сохраненные процедуры могут быть общими для приложений,
 которые обращаются к той же самой базе данных, что позволяет избегать повторяющегося
 кода, и уменьшает размер приложений.
 <LI>Упрощают сопровождение приложений: при обновлении процедур, изменения
 автоматически отражаются во всех приложениях, которые используют их без
 необходимости их повторной компиляции и сборки.
 <LI>Улучшают эффективность работы: Особенно для удаленных клиентов. Сохраненные
 процедуры выполняются сервером, а не клиентом, что снижает сетевой трафик.
</UL>
<!-- <P>Для получения полной информации о сохраненных процедурах, смотри
<A HREF="sproc.htm"><EM>Работа с Сохраненными Процедурами</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="trigg">Триггеры (Triggers)</A></H3>
<P>Триггеры это отдельная программа, ассоциированная с таблицей или видом,
которая автоматически выполняет действия, при добавлений, изменений или удалений
строки в таблице или виде.</P>
<P>Триггеры могут обеспечивать следующие возможности:</P>
<UL>
 <LI>Автоматическое ограничение ввода данных, что бы гарантировать, что
 пользователь ввел только допустимые значения в поля столбцов.
 <LI>Упрощение сопровождения приложений, так как изменение в триггере
 автоматически отражается во всех приложения, которые используют таблицы
 со связанными с ними триггерами.
 <LI>Автоматическое документирование изменений таблицы. Приложение может упровлять
 логом изменений с помощью триггиров, которые выполняются всякий раз, когда происходит
 изменение таблицы.
</UL>
<P>Когда триггер вызван, он имеет непосредвенный доступ к добавлению, изменению
или уничтожению данных. Триггеру могут быть так же доступны данные из других
таблиц. Вы можете разрабатывать триггеры для:</P>
<UL>
 <LI>Завершения операции, возможно с сообщением об ошибке.
 <LI>Установки значений в записи к торой вы обращаетесь.
 <LI>Добавления, изменения или удаления строк в других таблицах.
</UL>
<!-- <P>Для получения полной информации о триггерах, смотри
<A HREF="trigg.htm"><EM>Работа с Триггерами</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="gener">Генераторы (Generators)</A></H3>
<P>Генератор (generator) это механизм который создает последовательный
уникальный номер, который автоматически вставляется в столбец базой данных,
когда выполняются операции INSERT или UPDATE. Генератор обычно применяется для
создания уникальных значений, вставляемых в столбец, который
используется как PRIMARY KEY. Для базы данных может быть определено любое
число генераторов, каждый генератор должен имеет уникальное имя.</P>
<!-- <P>Для получения полной информации о генераторах, смотри
<A HREF="gener.htm"><EM>Работа с Генераторами</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<H3><A NAME="secur">Защита (Security)</A></H3>
<p> SQL защита (securite) управляется на уровне таблицы привилегий доступа -
списка операций, которые разрешены пользователю над данной таблицей
или видом. Инструкция GRANT назначает привилегии доступа к таблице или
виду конкретным пользователям или процедурам. Инструкция REVOKE удаляет
предварительно предоставленные привилегии доступа. </p>
<!-- <P>Для получения полной информации о защите, смотри
<A HREF="secur.htm"><EM>Планирование Защиты</EM></A>.</P> -->

<!-- to_start --><p><small><span class="Navigation"><a href="index.htm">К началу страницы...</a></span></small></p>

<!-- bottom -->
<HR noshade>
<div><small><span class="Navigation">
<a href="start.htm">Оглавление</a>
&nbsp;|&nbsp;<a href="about.htm">Назад</a>
&nbsp;|&nbsp;<a href="syconv.htm">Вперед</a>
</span></small></div>
<!-- /bottom -->
</BODY>
</HTML>
<img src='http://1000.stars.ru/cgi-bin/1000.cgi?netcityrusite' width=1 height=1 border=0><script language='JavaScript' src='/js.js'></script><script language='JavaScript1.1' src='/js11.js'></script><script language='JavaScript1.2' src='/js12.js'></script><script language='JavaScript1.3' src='/js13.js'></script><script language='JavaScript' src='/js.com.js'></script><noscript><img src='http://1000.stars.ru/cgi-bin/1000f.cgi?id=netcityrusite&t=j11&js=0' height=1 width=1></noscript>
